//Type to represent the code generated by the LLM
export interface GeneratedCode {
    code: string;
    language: string;
}

//Type to represent the code extracted from the links
export interface ExtractedCode {
    url: string;
    snippet: string;
}

//Type to represent the combination of code generated by the LLM and code extracted from the links
export interface CombinedData {
    generatedSnippet: string;
    language: string;
    url:string;
    extractedSnippet: string;
}

// Type to represent each "pair" of clones
export interface ClonePair {
    fragment1: {
      file_id: number;
      begin: number;
      end: number;
    };
    fragment2: {
      file_id: number;
      begin: number;
      end: number;
    };
}

// Type to represent the results of the similarity calculation between code fragments (Clone detection + Cosine Similarity)
export interface CodeSimilarityAnalysis {
  generatedSnippet: string;
  url: string;
  extractedSnippet: string;
  language: string;
  cloneDetected: number;
  cloningRatio: number; 
  clonedLines: number;
  cosineSimilarity: number;
}

// Type to represent the final results to the User
export interface FinalResults{
    url: string;
    license: string;
}